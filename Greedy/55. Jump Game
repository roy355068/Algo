# Given an array of non-negative integers, you are initially positioned at the first index of the array.

# Each element in the array represents your maximum jump length at that position.

# Determine if you are able to reach the last index.

# For example:
# A = [2,3,1,1,4], return true.

# A = [3,2,1,0,4], return false.


# Idea is that use a maximumReach variable to track the max range of the array can reach
# if i > m, indicated that i is not reachable by previous element and jumping
# so end the program earlier and return False, else if maximumReach >= the index of 
# last element, meaning that the last element is reachable, return True
class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums:
        	return False
        maximumReach = 0
        for i in xrange(len(nums)):
        	if i > maximumReach:
        		return False
        	maximumReach = max(i + nums[i] , maximumReach)
        	if maximumReach >= len(nums) - 1:
        		return True